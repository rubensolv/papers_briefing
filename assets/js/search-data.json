{
  
    
        "post0": {
            "title": "Talking about Ghost, MicroRTS and MicroPhantom",
            "content": "A Short Introduction . MicroPhantom: Playing microRTS under uncertainty and chaos .",
            "url": "https://rubensolv.github.io/papers_briefing/abstract/microrts/2020/05/27/ghost-microrts.html",
            "relUrl": "/abstract/microrts/2020/05/27/ghost-microrts.html",
            "date": " • May 27, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Evaluating LeagueDSL in a large number of maps",
            "content": "Details about charts . Each group of charts is interactive, it means that you can click on the bars. They have tooltips in each bar with code, test, and the agent type associated with each player tested. . Agent type can be: MP = Main Player ME = Main Exploiter LE = League Exploiter. . The Charts with the y-axis labeled &quot;TOTAL&quot; can be viewed as &quot;controller&quot;. The maximum score in this chart is 60. The others, 10. . #collapse-hide import pandas as pd import altair as alt import numpy as np . . Map Battle . Quantity of Iterations . #collapse-hide l = [[&#39;LB-42826107.out&#39;, 3], [&#39;LBattle-31696511.out&#39;, 5], [&#39;LBattle-31696509.out&#39;, 4], [&#39;LBattle-31696507.out&#39;, 5], [&#39;LBattle-31696506.out&#39;, 3], [&#39;LB-42826120.out&#39;, 4]] df = pd.DataFrame(l, columns=[&#39;Test&#39;,&#39;Iterations&#39;]) df.head(6) . . Test Iterations . 0 LB-42826107.out | 3 | . 1 LBattle-31696511.out | 5 | . 2 LBattle-31696509.out | 4 | . 3 LBattle-31696507.out | 5 | . 4 LBattle-31696506.out | 3 | . 5 LB-42826120.out | 4 | . Detailed Charts . #collapse-hide dt9_8 = pd.read_csv(&quot;/home/rubens/papers_briefing/csvs/mapBattle.csv&quot;) selector = alt.selection_single(empty=&#39;all&#39;, fields=[&#39;Player&#39;]) l = dt9_8[&#39;Player&#39;].tolist() color_scale = alt.Scale(domain=l,scheme=&quot;category20b&quot;) base = alt.Chart(dt9_8).properties( width=800, height=200 ).add_selection(selector) points = base.mark_bar(filled=True, size=30).encode( x=alt.X(&#39;Player:N&#39;, sort=alt.EncodingSortField(field=&#39;Test&#39;, order=&#39;descending&#39;)), y=alt.Y(&#39;TOTAL:Q&#39;, scale=alt.Scale(domain=[0,max(dt9_8[&#39;TOTAL&#39;].tolist())])), tooltip=[&#39;Test:N&#39;,&#39;Type:N&#39;], color=alt.condition(selector, &#39;Player:N&#39;, alt.value(&#39;lightgray&#39;), scale=color_scale), ) hists = base.mark_bar(opacity=1.0, thickness=100).encode( x=alt.X(&#39;Player:N&#39;), y=alt.Y(&#39;STT:Q&#39;, stack=None, scale=alt.Scale(domain=[0,10])), color=alt.Color(&#39;Player:N&#39;, scale=color_scale), tooltip=[&#39;Code:N&#39;] ).transform_filter( selector ).properties( width=100, height=200 ) hists2 = base.mark_bar(opacity=1.0, thickness=100).encode( x=alt.X(&#39;Player:N&#39;), y=alt.Y(&#39;LIR:Q&#39;, stack=None, scale=alt.Scale(domain=[0,10])), color=alt.Color(&#39;Player:N&#39;, scale=color_scale), tooltip=[&#39;Code:N&#39;] ).transform_filter( selector ).properties( width=100, height=200 ) hists3 = base.mark_bar(opacity=1.0, thickness=80).encode( x=alt.X(&#39;Player:N&#39;), y=alt.Y(&#39;NS:Q&#39;, stack=None, scale=alt.Scale(domain=[0,10])), color=alt.Color(&#39;Player:N&#39;, scale=color_scale), tooltip=[&#39;Code:N&#39;] ).transform_filter( selector ).properties( width=100, height=200 ) hists4 = base.mark_bar(opacity=1.0, thickness=80).encode( x=alt.X(&#39;Player:N&#39;), y=alt.Y(&#39;A3N:Q&#39;, stack=None, scale=alt.Scale(domain=[0,10])), color=alt.Color(&#39;Player:N&#39;, scale=color_scale), tooltip=[&#39;Code:N&#39;] ).transform_filter( selector ).properties( width=100, height=200 ) hists5 = base.mark_bar(opacity=1.0, thickness=80).encode( x=alt.X(&#39;Player:N&#39;), y=alt.Y(&#39;RAR:Q&#39;, stack=None, scale=alt.Scale(domain=[0,10])), color=alt.Color(&#39;Player:N&#39;, scale=color_scale), tooltip=[&#39;Code:N&#39;] ).transform_filter( selector ).properties( width=100, height=200 ) hists6 = base.mark_bar(opacity=1.0, thickness=80).encode( x=alt.X(&#39;Player:N&#39;), y=alt.Y(&#39;WOR:Q&#39;, stack=None, scale=alt.Scale(domain=[0,10])), color=alt.Color(&#39;Player:N&#39;, scale=color_scale), tooltip=[&#39;Code:N&#39;] ).transform_filter( selector ).properties( width=100, height=200 ) alt.vconcat(points , hists | hists2 | hists3 | hists4 | hists5 | hists6) . . Map 8x8 . Quantity of Iterations . #collapse-hide l = [[&#39;L8-42826052.out&#39;, 2], [&#39;L8x8-31696644.out&#39;, 3], [&#39;L8x8-31696609.out&#39;, 2], [&#39;L8-42826046.out&#39;, 4], [&#39;L8x8-31696645.out&#39;, 3], [&#39;L8x8-31696632.out&#39;, 3]] df = pd.DataFrame(l, columns=[&#39;Test&#39;,&#39;Iterations&#39;]) df.head(5) . . Test Iterations . 0 L8-42826052.out | 2 | . 1 L8x8-31696644.out | 3 | . 2 L8x8-31696609.out | 2 | . 3 L8-42826046.out | 4 | . 4 L8x8-31696645.out | 3 | . Detailed Charts . #collapse-hide dt9_8 = pd.read_csv(&quot;/home/rubens/papers_briefing/csvs/map8x8.csv&quot;) selector = alt.selection_single(empty=&#39;all&#39;, fields=[&#39;Player&#39;]) l = dt9_8[&#39;Player&#39;].tolist() color_scale = alt.Scale(domain=l,scheme=&quot;category20b&quot;) base = alt.Chart(dt9_8).properties( width=800, height=200 ).add_selection(selector) points = base.mark_bar(filled=True, size=30).encode( x=alt.X(&#39;Player:N&#39;, sort=alt.EncodingSortField(field=&#39;Test&#39;, order=&#39;descending&#39;)), y=alt.Y(&#39;TOTAL:Q&#39;, scale=alt.Scale(domain=[0,max(dt9_8[&#39;TOTAL&#39;].tolist())])), tooltip=[&#39;Test:N&#39;,&#39;Type:N&#39;], color=alt.condition(selector, &#39;Player:N&#39;, alt.value(&#39;lightgray&#39;), scale=color_scale), ) hists = base.mark_bar(opacity=1.0, thickness=100).encode( x=alt.X(&#39;Player:N&#39;), y=alt.Y(&#39;STT:Q&#39;, stack=None, scale=alt.Scale(domain=[0,10])), color=alt.Color(&#39;Player:N&#39;, scale=color_scale), tooltip=[&#39;Code:N&#39;] ).transform_filter( selector ).properties( width=100, height=200 ) hists2 = base.mark_bar(opacity=1.0, thickness=100).encode( x=alt.X(&#39;Player:N&#39;), y=alt.Y(&#39;LIR:Q&#39;, stack=None, scale=alt.Scale(domain=[0,10])), color=alt.Color(&#39;Player:N&#39;, scale=color_scale), tooltip=[&#39;Code:N&#39;] ).transform_filter( selector ).properties( width=100, height=200 ) hists3 = base.mark_bar(opacity=1.0, thickness=80).encode( x=alt.X(&#39;Player:N&#39;), y=alt.Y(&#39;NS:Q&#39;, stack=None, scale=alt.Scale(domain=[0,10])), color=alt.Color(&#39;Player:N&#39;, scale=color_scale), tooltip=[&#39;Code:N&#39;] ).transform_filter( selector ).properties( width=100, height=200 ) hists4 = base.mark_bar(opacity=1.0, thickness=80).encode( x=alt.X(&#39;Player:N&#39;), y=alt.Y(&#39;A3N:Q&#39;, stack=None, scale=alt.Scale(domain=[0,10])), color=alt.Color(&#39;Player:N&#39;, scale=color_scale), tooltip=[&#39;Code:N&#39;] ).transform_filter( selector ).properties( width=100, height=200 ) hists5 = base.mark_bar(opacity=1.0, thickness=80).encode( x=alt.X(&#39;Player:N&#39;), y=alt.Y(&#39;RAR:Q&#39;, stack=None, scale=alt.Scale(domain=[0,10])), color=alt.Color(&#39;Player:N&#39;, scale=color_scale), tooltip=[&#39;Code:N&#39;] ).transform_filter( selector ).properties( width=100, height=200 ) hists6 = base.mark_bar(opacity=1.0, thickness=80).encode( x=alt.X(&#39;Player:N&#39;), y=alt.Y(&#39;WOR:Q&#39;, stack=None, scale=alt.Scale(domain=[0,10])), color=alt.Color(&#39;Player:N&#39;, scale=color_scale), tooltip=[&#39;Code:N&#39;] ).transform_filter( selector ).properties( width=100, height=200 ) alt.vconcat(points , hists | hists2 | hists3 | hists4 | hists5 | hists6) . . Map 9x8 . Quantity of Iterations . #collapse-hide l = [[&#39;L9-42849689.out&#39;, 1], [&#39;L9x8-31696705.out&#39;, 1], [&#39;L9x8-31696699.out&#39;, 1]] df = pd.DataFrame(l, columns=[&#39;Test&#39;,&#39;Iterations&#39;]) df.head() . . Test Iterations . 0 L9-42849689.out | 1 | . 1 L9x8-31696705.out | 1 | . 2 L9x8-31696699.out | 1 | . Detailed Charts . #collapse-hide dt9_8 = pd.read_csv(&quot;/home/rubens/papers_briefing/csvs/map9x8.csv&quot;) selector = alt.selection_single(empty=&#39;all&#39;, fields=[&#39;Player&#39;]) l = dt9_8[&#39;Player&#39;].tolist() color_scale = alt.Scale(domain=l,scheme=&quot;category20b&quot;) base = alt.Chart(dt9_8).properties( width=800, height=200 ).add_selection(selector) points = base.mark_bar(filled=True, size=60).encode( x=alt.X(&#39;Player:N&#39;, sort=alt.EncodingSortField(field=&#39;Test&#39;, order=&#39;descending&#39;)), y=alt.Y(&#39;TOTAL:Q&#39;, scale=alt.Scale(domain=[0,max(dt9_8[&#39;TOTAL&#39;].tolist())])), tooltip=[&#39;Test:N&#39;,&#39;Type:N&#39;], color=alt.condition(selector, &#39;Player:N&#39;, alt.value(&#39;lightgray&#39;), scale=color_scale), ) hists = base.mark_bar(opacity=1.0, thickness=100).encode( x=alt.X(&#39;Player:N&#39;), y=alt.Y(&#39;STT:Q&#39;, stack=None, scale=alt.Scale(domain=[0,10])), color=alt.Color(&#39;Player:N&#39;, scale=color_scale), tooltip=[&#39;Code:N&#39;] ).transform_filter( selector ).properties( width=100, height=200 ) hists2 = base.mark_bar(opacity=1.0, thickness=100).encode( x=alt.X(&#39;Player:N&#39;), y=alt.Y(&#39;LIR:Q&#39;, stack=None, scale=alt.Scale(domain=[0,10])), color=alt.Color(&#39;Player:N&#39;, scale=color_scale), tooltip=[&#39;Code:N&#39;] ).transform_filter( selector ).properties( width=100, height=200 ) hists3 = base.mark_bar(opacity=1.0, thickness=80).encode( x=alt.X(&#39;Player:N&#39;), y=alt.Y(&#39;NS:Q&#39;, stack=None, scale=alt.Scale(domain=[0,10])), color=alt.Color(&#39;Player:N&#39;, scale=color_scale), tooltip=[&#39;Code:N&#39;] ).transform_filter( selector ).properties( width=100, height=200 ) hists4 = base.mark_bar(opacity=1.0, thickness=80).encode( x=alt.X(&#39;Player:N&#39;), y=alt.Y(&#39;A3N:Q&#39;, stack=None, scale=alt.Scale(domain=[0,10])), color=alt.Color(&#39;Player:N&#39;, scale=color_scale), tooltip=[&#39;Code:N&#39;] ).transform_filter( selector ).properties( width=100, height=200 ) hists5 = base.mark_bar(opacity=1.0, thickness=80).encode( x=alt.X(&#39;Player:N&#39;), y=alt.Y(&#39;RAR:Q&#39;, stack=None, scale=alt.Scale(domain=[0,10])), color=alt.Color(&#39;Player:N&#39;, scale=color_scale), tooltip=[&#39;Code:N&#39;] ).transform_filter( selector ).properties( width=100, height=200 ) hists6 = base.mark_bar(opacity=1.0, thickness=80).encode( x=alt.X(&#39;Player:N&#39;), y=alt.Y(&#39;WOR:Q&#39;, stack=None, scale=alt.Scale(domain=[0,10])), color=alt.Color(&#39;Player:N&#39;, scale=color_scale), tooltip=[&#39;Code:N&#39;] ).transform_filter( selector ).properties( width=100, height=200 ) alt.vconcat(points , hists | hists2 | hists3 | hists4 | hists5 | hists6) . . Map 16x16 . Quantity of Iterations . #collapse-hide l = [[&#39;L16x16-31696803.out&#39;, 3], [&#39;L16x16-31696791.out&#39;, 2], [&#39;L16-42825999.out&#39;, 3], [&#39;L16-42872936.out&#39;, 4], [&#39;L16-42872925.out&#39;, 3]] df = pd.DataFrame(l, columns=[&#39;Test&#39;,&#39;Iterations&#39;]) df.head() . . Test Iterations . 0 L16x16-31696803.out | 3 | . 1 L16x16-31696791.out | 2 | . 2 L16-42825999.out | 3 | . 3 L16-42872936.out | 4 | . 4 L16-42872925.out | 3 | . Detailed Charts . #collapse-hide dt9_8 = pd.read_csv(&quot;/home/rubens/papers_briefing/csvs/map16x16.csv&quot;) selector = alt.selection_single(empty=&#39;all&#39;, fields=[&#39;Player&#39;]) l = dt9_8[&#39;Player&#39;].tolist() color_scale = alt.Scale(domain=l,scheme=&quot;category20b&quot;) base = alt.Chart(dt9_8).properties( width=800, height=200 ).add_selection(selector) points = base.mark_bar(filled=True, size=25).encode( x=alt.X(&#39;Player:N&#39;, sort=alt.EncodingSortField(field=&#39;Test&#39;, order=&#39;descending&#39;)), y=alt.Y(&#39;TOTAL:Q&#39;, scale=alt.Scale(domain=[0,max(dt9_8[&#39;TOTAL&#39;].tolist())])), tooltip=[&#39;Test:N&#39;,&#39;Type:N&#39;], color=alt.condition(selector, &#39;Player:N&#39;, alt.value(&#39;lightgray&#39;), scale=color_scale), ) hists = base.mark_bar(opacity=1.0, thickness=100).encode( x=alt.X(&#39;Player:N&#39;), y=alt.Y(&#39;STT:Q&#39;, stack=None, scale=alt.Scale(domain=[0,10])), color=alt.Color(&#39;Player:N&#39;, scale=color_scale), tooltip=[&#39;Code:N&#39;] ).transform_filter( selector ).properties( width=100, height=200 ) hists2 = base.mark_bar(opacity=1.0, thickness=100).encode( x=alt.X(&#39;Player:N&#39;), y=alt.Y(&#39;LIR:Q&#39;, stack=None, scale=alt.Scale(domain=[0,10])), color=alt.Color(&#39;Player:N&#39;, scale=color_scale), tooltip=[&#39;Code:N&#39;] ).transform_filter( selector ).properties( width=100, height=200 ) hists3 = base.mark_bar(opacity=1.0, thickness=80).encode( x=alt.X(&#39;Player:N&#39;), y=alt.Y(&#39;NS:Q&#39;, stack=None, scale=alt.Scale(domain=[0,10])), color=alt.Color(&#39;Player:N&#39;, scale=color_scale), tooltip=[&#39;Code:N&#39;] ).transform_filter( selector ).properties( width=100, height=200 ) hists4 = base.mark_bar(opacity=1.0, thickness=80).encode( x=alt.X(&#39;Player:N&#39;), y=alt.Y(&#39;A3N:Q&#39;, stack=None, scale=alt.Scale(domain=[0,10])), color=alt.Color(&#39;Player:N&#39;, scale=color_scale), tooltip=[&#39;Code:N&#39;] ).transform_filter( selector ).properties( width=100, height=200 ) hists5 = base.mark_bar(opacity=1.0, thickness=80).encode( x=alt.X(&#39;Player:N&#39;), y=alt.Y(&#39;RAR:Q&#39;, stack=None, scale=alt.Scale(domain=[0,10])), color=alt.Color(&#39;Player:N&#39;, scale=color_scale), tooltip=[&#39;Code:N&#39;] ).transform_filter( selector ).properties( width=100, height=200 ) hists6 = base.mark_bar(opacity=1.0, thickness=80).encode( x=alt.X(&#39;Player:N&#39;), y=alt.Y(&#39;WOR:Q&#39;, stack=None, scale=alt.Scale(domain=[0,10])), color=alt.Color(&#39;Player:N&#39;, scale=color_scale), tooltip=[&#39;Code:N&#39;] ).transform_filter( selector ).properties( width=100, height=200 ) alt.vconcat(points , hists | hists2 | hists3 | hists4 | hists5 | hists6) . . L16-42872936 - Four iterations . #collapse-hide dtit = pd.read_csv(&quot;/home/rubens/papers_briefing/csvs/testeIterationGreed.csv&quot;) dtit.head() alt.Chart(dtit).mark_line().encode( x=&#39;iteration&#39;, y=&#39;score&#39;, color=&#39;player&#39;, strokeDash=&#39;player&#39;, ).properties( width=600, height=200 ) . . Map 24x24 . Quantity of Iterations . #collapse-hide l = [[&#39;L24x24-31696820.out&#39;, 1], [&#39;L24-42826032.out&#39;, 1], [&#39;L24x24-31696815.out&#39;, 1], [&#39;L24-42826026.out&#39;, 1], [&#39;L24x24-31696816.out&#39;, 1]] df = pd.DataFrame(l, columns=[&#39;Test&#39;,&#39;Iterations&#39;]) df.head() . . Test Iterations . 0 L24x24-31696820.out | 1 | . 1 L24-42826032.out | 1 | . 2 L24x24-31696815.out | 1 | . 3 L24-42826026.out | 1 | . 4 L24x24-31696816.out | 1 | . Detailed Charts . #collapse-hide dt9_8 = pd.read_csv(&quot;/home/rubens/papers_briefing/csvs/map24x24.csv&quot;) selector = alt.selection_single(empty=&#39;all&#39;, fields=[&#39;Player&#39;]) l = dt9_8[&#39;Player&#39;].tolist() color_scale = alt.Scale(domain=l,scheme=&quot;category20b&quot;) base = alt.Chart(dt9_8).properties( width=800, height=200 ).add_selection(selector) points = base.mark_bar(filled=True, size=25).encode( x=alt.X(&#39;Player:N&#39;, sort=alt.EncodingSortField(field=&#39;Test&#39;, order=&#39;descending&#39;)), y=alt.Y(&#39;TOTAL:Q&#39;, scale=alt.Scale(domain=[0,max(dt9_8[&#39;TOTAL&#39;].tolist())])), tooltip=[&#39;Test:N&#39;,&#39;Type:N&#39;], color=alt.condition(selector, &#39;Player:N&#39;, alt.value(&#39;lightgray&#39;), scale=color_scale), ) hists = base.mark_bar(opacity=1.0, thickness=100).encode( x=alt.X(&#39;Player:N&#39;), y=alt.Y(&#39;STT:Q&#39;, stack=None, scale=alt.Scale(domain=[0,10])), color=alt.Color(&#39;Player:N&#39;, scale=color_scale), tooltip=[&#39;Code:N&#39;] ).transform_filter( selector ).properties( width=100, height=200 ) hists2 = base.mark_bar(opacity=1.0, thickness=100).encode( x=alt.X(&#39;Player:N&#39;), y=alt.Y(&#39;LIR:Q&#39;, stack=None, scale=alt.Scale(domain=[0,10])), color=alt.Color(&#39;Player:N&#39;, scale=color_scale), tooltip=[&#39;Code:N&#39;] ).transform_filter( selector ).properties( width=100, height=200 ) hists3 = base.mark_bar(opacity=1.0, thickness=80).encode( x=alt.X(&#39;Player:N&#39;), y=alt.Y(&#39;NS:Q&#39;, stack=None, scale=alt.Scale(domain=[0,10])), color=alt.Color(&#39;Player:N&#39;, scale=color_scale), tooltip=[&#39;Code:N&#39;] ).transform_filter( selector ).properties( width=100, height=200 ) hists4 = base.mark_bar(opacity=1.0, thickness=80).encode( x=alt.X(&#39;Player:N&#39;), y=alt.Y(&#39;A3N:Q&#39;, stack=None, scale=alt.Scale(domain=[0,10])), color=alt.Color(&#39;Player:N&#39;, scale=color_scale), tooltip=[&#39;Code:N&#39;] ).transform_filter( selector ).properties( width=100, height=200 ) hists5 = base.mark_bar(opacity=1.0, thickness=80).encode( x=alt.X(&#39;Player:N&#39;), y=alt.Y(&#39;RAR:Q&#39;, stack=None, scale=alt.Scale(domain=[0,10])), color=alt.Color(&#39;Player:N&#39;, scale=color_scale), tooltip=[&#39;Code:N&#39;] ).transform_filter( selector ).properties( width=100, height=200 ) hists6 = base.mark_bar(opacity=1.0, thickness=80).encode( x=alt.X(&#39;Player:N&#39;), y=alt.Y(&#39;WOR:Q&#39;, stack=None, scale=alt.Scale(domain=[0,10])), color=alt.Color(&#39;Player:N&#39;, scale=color_scale), tooltip=[&#39;Code:N&#39;] ).transform_filter( selector ).properties( width=100, height=200 ) alt.vconcat(points , hists | hists2 | hists3 | hists4 | hists5 | hists6) . .",
            "url": "https://rubensolv.github.io/papers_briefing/evaluations/tests/2020/05/25/dsl-league-evaluation.html",
            "relUrl": "/evaluations/tests/2020/05/25/dsl-league-evaluation.html",
            "date": " • May 25, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Alphastar",
            "content": "Let start with something good?! . The first paper, that I want to write an abstract about, is called Grandmaster level in StarCraft II using multi-agent reinforcement learning. The name looks too long, and we can call this paper, for short, AlphaStar. This incredible method (I don’t want to call it “algorithm” because it sounds less than the technique is, for me) mixes with mastery techniques as neural networks, imitation learning, reinforcement learning and multi-agent learning, and I call this method incredible because it won professional players in the game Starcraft 2, and with the same limitations that humans have, the method archive the grandmaster position in the official rank of players. . Learning with humans . The first step consists of learning with replays using supervised learning. In resume, the supervised learning tries to approximate how humans play the game using observations from the game’s replays. Those replays are free, public, and anonymous. After train with those replays, we have three different AI’s, one for each race, able to play the game at the same level as one human play in the rank gold of the game. It means, if we get those AI’s and put to play matches against humans in the official (and online) championship of Starcraft 2, they will get rank gold ( in order of difficulty, bronze, silver, gold, platinum, diamond, master and grandmaster). . I know, that it sounds incredible. Many of us don’t have skills enough to play the game at this level. Therefore, the group of researches, co-led by David Silver, knows that the method would be more than a gold rank player. . AlphaStar League: Where the greats rise! . A league is a place where the AlphaStar agents can play against copies of themselves exploring different strategies and variations, as humans do. The focus of the league consists of work as a multi-agent reinforcement learning, where agents learn, try, exploit, and explore different strategies, rising and improving unimaginable agents’ behavior. Each moment when a good strategy is discovered, the agent is frozen and put as a fixed part of the league. Agents like that help the league to keep a large number of strategies and variety in the learning process. . Take-Away . I know that the post looks short, but I think that it is the idea. However, I will put here some links that I suggest everyone see, if you get yourself interested in the thematic. . DeepMind Demonstration . | Lex Fridman and David Silver . | . In the paper, we can find more detailed concepts and the pseudocode of the method. I wrote my own AlphaStar League for a project that I’m doing, and it is a really good process! We can learn a lot about the concept that the DeepMind used in this project! . Goodbye! .",
            "url": "https://rubensolv.github.io/papers_briefing/2020/05/24/AlphaStar.html",
            "relUrl": "/2020/05/24/AlphaStar.html",
            "date": " • May 24, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Why am I writing a blog?",
            "content": "A Small Introduction . This is my first post-blog and probably I will write something wrong or use the wrong word to explain something. It is common when we are just writing, I think. . If you are looking for a copy of my papers, you can find here. That is my personal (maybe professional (?)) website. . I started this blog to write some abstracts about papers that I&#39;m reading or that I had read. I don&#39;t have plans to write something perfect or well write. I just will use this blog to practice. Sometimes I can write some briefings about the research that I&#39;m doing. I don&#39;t know if it will make sense here, but I can try to write something understandable. . .",
            "url": "https://rubensolv.github.io/papers_briefing/introduction/2020/05/23/first-post.html",
            "relUrl": "/introduction/2020/05/23/first-post.html",
            "date": " • May 23, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "How to use Fastages tutorial.",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://rubensolv.github.io/papers_briefing/jupyter/2020/02/20/first-post.html",
            "relUrl": "/jupyter/2020/02/20/first-post.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I’m a doctoral student 1 at the Universidade Federal de Viçosa (UFV), Minas Gerais – Brazil, under the guidance of Prof. Levi Lelis in the area of Artificial Intelligence. Received a specialization course in Analysis and Management of Information Systems from the Instituto Federal Fluminense and BS in Computer Science from Universidade Candido Mendes. . https://rubensoliveiramoraes.wordpress.com/. &#8617; . |",
          "url": "https://rubensolv.github.io/papers_briefing/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://rubensolv.github.io/papers_briefing/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}